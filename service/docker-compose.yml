version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres-coralzinho
    environment:
      POSTGRES_DB: coralzinho
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tonzinhos-network
    restart: unless-stopped
  
  mongodb:
    image: mongo:7.0
    container_name: mongodb-coralzinho
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: coralzinho
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - tonzinhos-network
    restart: unless-stopped 
    
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq-coralzinho
    ports:
      - "25082:15672"  # UI
      - "5672:5672"    # AMQP
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - tonzinhos-network 
    command: >
      bash -c "
        rabbitmq-server &
        sleep 10 &&
        rabbitmq-plugins enable rabbitmq_management &&
        if [ -f /etc/rabbitmq/definitions.json ]; then
          rabbitmqctl import_definitions /etc/rabbitmq/definitions.json
        fi &&
        wait
      "

networks:
  tonzinhos-network:
    driver: bridge
    name: tonzinhos-network

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
